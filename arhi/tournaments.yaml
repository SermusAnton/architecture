openapi: 3.0.3
info:
  title: Tournaments
  description: >-
    This is a sample Tournaments Service based on the OpenAPI 3.0
    specification.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://tournaments.com/api/v1
tags:
  - name: tournament
    description: Access to information about tournaments
    externalDocs:
      description: Find out more
      url: https://tournaments.com/api/v1
paths:
  /tournament:
    post:
      tags:
        - tournament
      summary: Add a new tournament
      description: Add a new tournament
      operationId: addTournament
      requestBody:
        description: Create a new tournament
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tournament'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tournament'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tournament'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:tournaments
            - read:tournaments
  /tournament/{tournamentId}:
    get:
      tags:
        - tournament
      summary: Find tournament by ID
      description: Returns a single tournament
      operationId: getTournamentById
      parameters:
        - name: tournamentId
          in: path
          description: ID of tournament to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Tournament'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tournament not found
      security:
        - api_key: []
        - petstore_auth:
            - write:tournaments
            - read:tournaments
  /tournament/{tournamentId}/rating:
    get:
      tags:
        - tournament
      summary: Get tournament rating by ID
      description: Returns a single rating
      operationId: getRatingByTournamentId
      parameters:
        - name: tournamentId
          in: path
          description: ID of tournament
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tournament not found
      security:
        - api_key: []
        - petstore_auth:
            - write:tournaments
            - read:tournaments
  /tournament/{tournamentId}/user/{participantId}:
    post:
      tags:
        - tournament
      summary: Add a partipant to tournament
      description: Add a partipant to tournament
      operationId: addPartipant
      parameters:
        - name: tournamentId
          in: path
          description: ID of battle to return
          required: true
          schema:
            type: integer
            format: int64
        - name: participantId
          in: path
          description: ID of battle to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tournament'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:tournaments
            - read:tournaments
components:
  schemas:
    Tournament:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        regular:
          type: boolean
        frequency:
          type: string
          default: everyday
          enum:
            - everyday
            - everyweek
            - everymonth
        nextDateTime:
          type: string
          format: date-time
        battles:
          type: array
          items:
            type: integer
            format: int64
            example: 10
        users:
          type: array
          items:
            type: integer
            format: int64
            example: 10
      xml:
        name: tournament
    Rating:
      type: object
      properties:
        points:
          type: integer
          format: int64
          example: 10
      xml:
        name: rating
   
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://tournaments.com/oauth/authorize
          scopes:
            write:battles: modify tournaments
            read:battles: read your tournaments
    api_key:
      type: apiKey
      name: api_key
      in: header
